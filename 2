## Primitive Type 타입 종류와 값의 범위 및 기본값
 - 실제 데이터를 저장하는 타입
- 기본값이 있기 때문에 null 이 존재 하지 않음
- JVM 의 Runtime Data Area 중 stack에 저장
- 값의 범위를 벗어나면 에러가 발생한다
- Heap Area에 저장된다.


|              | 타입          | 할당되는 메모리크기 | 기본값 | 데이터 표현범위 
---------------|---------------|-------|-------|-------------|
|논리형        | boolean       | 1byte | false | true, false |
|정수형        | byte          | 1byte | 0     |-128 ~127    |
|정수형        | short         | 2byte | 0     |-2^15 ~ (2^15 - 1)   |
|정수형        | int         | 4byte | 0     |-2^31 ~ (2^31 - 1))   |
|정수형        | long         | 8byte | 0L     |-2^63 ~ (2^63 - 1))   |
|실수형        | float         | 4byte | 0.0F     |3.4X10^-38 ~ 3.4X10^38   |
|실수형        | double         | 8byte | 0.0     |1.7X10^-308 ~ 1.7X10^308   |
|문자형        | char         | 2byte | '\u0000'     |0~65,535   |

## Reference 타입 
- class, interface, enum, array, String Type 이 있다
- Primitive 을 제외한 모든 타입은 Reference 타입이다
- 빈객체를 의미하는 null이 존재


## 리터럴
- 리터럴은 변하지 않는 고정값을 의미함.
    ```
    int a = 10;
    ```
- 리터럴은 Heap 영역안의 constant pool 에서 관리된다.
     ```
    int a = 10;
    int b = 10; 
    
    // a, b  모두 contant pool 의 10을 가리킨다.
    ```
- 때문에 리터럴의 "==" 은 메모리 주소를 가리키게 됨. 10 이 아니라 서로 다른 수를 선언한다면 constant pool 에서의 다른 메모리 주소를 나타나게됨
     ```
    int a = 10;
    int b = 20; 
    
    // a, b  모두 contant pool 의 다른 주소를 가리킨다.
    ```

## 변수 선언과 초기화 방법
- 타입과 변수명을 입력한다
- 변수명의 명명규칙은 다음과 같다
    - 예약어 혹은 keyword는 사용이 불가하다(true, false)
    - 첫글자는 숫자로 시작할수 없다
    - 특수문자는 _, '$' 만 사용가능하다
    - 대소문자는 단어의미로 구분하며 길이에 제한이 없다
     ```
     // 변수 선언
    String word;
    
    // 변수 초기화
    word = "워드"
    
    // 변수 선언 및 초기화
    String word = "워드"
    ```
    
## 변수 스코프와 라이프 타임
- 지역 변수
    - 특정 스코프내에서 생성되었을때 스코프 안에서만 사용할 수 있다.
    
- 전역 변수
    - 클래스 내에서 선언된 변수이며, 사용범위는 클래스 전체이다.
    - 메인메소드가 같은 클래스 안에 있어도, 전역변수를 사용할 수 없다.
    - 다만 static 변수는 사용가능하다

    
- 클래스 변수
    - 클래스 내에서 static 키워드로 선언된 변수
    - JVM 에서 실행되어 클래스가 메모리에 올라가고 종료될때까지 유지
    - static 변수는 모든 클래스에서 사용이 공유할수 있다.
    ```
    public class Ex {
    static int staticVal = 7;	// 스태틱 변수
    int globalScope = 10;	// 전역변수, 인스턴스 변수
    
    public void scopeExTest(int value) {
    	int localScope = 10;	// 지역변수
        System.outprintln(localScope);	
    }
    
    System.outprintln(localScope); 	// 오류
    
    public static void main(String[] args) {
    	
    	
    	System.outprintln(globalScope);	// 오류
    	System.outprintln(localScope);	// 오류
    	System.outprintln(staticVal);	// 사용가능
    	
    	Ex ex = new Ex();
    	Ex ex2 = new Ex();
    	ex.staticVal = 10;
    	ex2.staticVal = 20;
    	System.outprintln(ex.staticVal); // 20 
    	
    }
    ```
    
## 타입변환
데이터 타입을 다른 데이터 타입으로 변환하는 것을 말한다. 타입변환은 두가지 종류가 있다.
- 자동(묵시적) 타입변환 : 프로그램 실행도중 자동적으로 타입이 변환되는 것을 말한다. 작은 크기 타입이 큰 크기의 타입으로 변환되는 것도 포함한다
    ```
    byte < short < int < long < float < double 
    
    byte value = 10;
    int intValue = byteValue; // 자동타입 변환
    
    char charValue = 'A';
    int intValue = charValue; // 65
    
    byte byteV = 65;
    char charValue = byteValue; XX 컴파일에러
    
    ```

- 강제(명시적) 타입변환 :  큰 데이터 타입을 작은 데이터 타입으로 쪼개어서 저장하는 것을 강제 타입 변환 or Casting 이라 한다.
    ```
    int v = 110304815;
    byte bv = (byte) v; 10//
    
    ```
    
## 1차 2차 배열 선언하기 
    ```
    //선언하기 
    타입[] 변수;  
    타입  변수[];
    
    int[] intArr;
    int intArr[];
    
    //초기화 하기
    타입[] 변수 = null
    
    int[] intArr = null;
    
    //값 목록으로 배열 선언하기
    int[] intArr ={0,1,3}
    String[] strArr = {"신", "김", "똥"}
    
    //배열 인덱스 값 수정하기
    strArr[1] = "이";
    
    //new 연산자로 배열 생성
    타입[]변수 = new 타입[길이];
    int[] intArr= new int[5];
    
    타입[]변수 = new 타입[]{목록}
    int[] intArr = new int[]{1,3,5}
    
    2차원 배열 선언(행이 2, 열이 3)
    int[][] v = new int[2][3]
    ---
    ---
     2차원 배열 선언(행이 2, 열이 random)
     int[][] v = new int[2][]
     --
     ---
     
     2차원 배열 값목록으로 만들기(2X2)
     타입[][] v= {{}, {}}
     int[][] v= {{95, 80}, {92,96}}
    
    
    ```
    
## 타입추론
자바10 에서 도입된 var 는 변수의 타입을 생략할 수 있으며, 컴파일러가 타입을 추론하며, 컴파일타임에서 추론하는 것이라 runtime에는 영향을 미치지 않는다.
        ```
        var str = "hello"; 
        ```

- 지역변수에서만 사용이 가능하다.
    ```
    class V {
        public var str = "aaa" // 에러
    }
    ```

- 초기화가 필요하다
    ```
    var n; // 에러
    var n = 3 // O
    ```

- null로 초기화 할 수 없다
    ```
    var n = null // 에러
    ```
- 배열에 사용될 수 없다
    ```
    var n = {1, 3} // 에러
    ```
- 람다도 불가능하다
    ```
    var f = () -> {}; // 에러
    ```
    
